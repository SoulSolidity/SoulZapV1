// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity >=0.7.0 <0.9.0;
pragma experimental ABIEncoderV2;

interface ICustomBillRefillable {
    event BillClaimed(uint256 indexed billId, address indexed recipient, uint256 payout, uint256 remaining);
    event BillCreated(uint256 deposit, uint256 payout, uint256 expires, uint256 indexed billId);
    event BillInitialized(ICustomBill.BillTerms billTerms, uint256 lastDecay);
    event BillPriceChanged(uint256 internalPrice, uint256 debtRatio);
    event BillRefilled(address payoutToken, uint256 amountAdded);
    event ControlVariableAdjustment(uint256 initialBCV, uint256 newBCV, uint256 adjustment);
    event FeeToChanged(address indexed newFeeTo);
    event Initialized(uint8 version);
    event MaxTotalPayoutChanged(uint256 newMaxTotalPayout);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    event SetAdjustment(uint256 currentBCV, uint256 increment, uint256 targetBCV, uint256 buffer);
    event SetFees(uint256[] fees, uint256[] tierCeilings);
    event SetPendingOwner(address indexed pendingOwner);
    event TermsSet(uint8 parameter, uint256 input);
    event UpdateClaimApproval(address indexed owner, address indexed approvedAccount, bool approved);

    function DAO() external view returns (address);

    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);

    function MAX_FEE() external view returns (uint256);

    function REFILL_ROLE() external view returns (bytes32);

    function acceptOwnership() external;

    function adjustment()
        external
        view
        returns (uint256 rate, uint256 target, uint256 buffer, uint256 lastAdjustmentTimestamp);

    function allIssuedBillIds() external view returns (uint256[] memory);

    function batchClaim(uint256[] memory _billIds) external returns (uint256 payout);

    function batchRedeem(uint256[] memory _billIds) external returns (uint256 payout);

    function billInfo(
        uint256
    )
        external
        view
        returns (
            uint256 payout,
            uint256 payoutClaimed,
            uint256 vesting,
            uint256 vestingTerm,
            uint256 vestingStartTimestamp,
            uint256 lastClaimTimestamp,
            uint256 truePricePaid
        );

    function billNft() external view returns (address);

    function billPrice() external view returns (uint256 price_);

    function changeFeeTo(address _feeTo) external;

    function claim(uint256 _billId) external returns (uint256);

    function claimablePayout(uint256 _billId) external view returns (uint256 claimablePayout_);

    function currentDebt() external view returns (uint256);

    function currentFee() external view returns (uint256 currentFee_);

    function customTreasury() external view returns (address);

    function debtDecay() external view returns (uint256 decay_);

    function debtRatio() external view returns (uint256 debtRatio_);

    function deposit(uint256 _amount, uint256 _maxPrice, address _depositor) external returns (uint256);

    function feeInPayout() external view returns (bool);

    function feeTiers(uint256) external view returns (uint256 tierCeilings, uint256 fees);

    function feeTo() external view returns (address);

    function getBillIds(address user) external view returns (uint256[] memory);

    function getBillIdsInRange(address user, uint256 start, uint256 end) external view returns (uint256[] memory);

    function getBillInfo(uint256 billId) external view returns (ICustomBill.Bill memory);

    function getFeeTierLength() external view returns (uint256 tierLength_);

    function getMaxTotalPayout() external view returns (uint256);

    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    function getRoleMember(bytes32 role, uint256 index) external view returns (address);

    function getRoleMemberCount(bytes32 role) external view returns (uint256);

    function grantRefillRole(address[] memory _billRefillers) external;

    function grantRole(bytes32 role, address account) external;

    function hasRole(bytes32 role, address account) external view returns (bool);

    function initialize(
        address _customTreasury,
        ICustomBill.BillCreationDetails memory _billCreationDetails,
        ICustomBill.BillTerms memory _billTerms,
        ICustomBill.BillAccounts memory _billAccounts,
        address[] memory _billRefillers
    ) external;

    function initialize(
        address _customTreasury,
        ICustomBill.BillCreationDetails memory _billCreationDetails,
        ICustomBill.BillTerms memory _billTerms,
        ICustomBill.BillAccounts memory _billAccounts
    ) external;

    function lastDecay() external view returns (uint256);

    function maxPayout() external view returns (uint256);

    function owner() external view returns (address);

    function payoutFor(uint256 _amount) external view returns (uint256 _payout, uint256 _fee);

    function payoutToken() external view returns (address);

    function pendingOwner() external view returns (address);

    function pendingPayout(uint256 _billId) external view returns (uint256 pendingPayout_);

    function pendingVesting(uint256 _billId) external view returns (uint256 pendingVesting_);

    function principalToken() external view returns (address);

    function redeem(uint256 _billId) external returns (uint256);

    function redeemerApproved(address, address) external view returns (bool);

    function refillPayoutToken(uint256 _refillAmount) external;

    function renounceOwnership() external;

    function renounceRole(bytes32 role, address account) external;

    function revokeRefillRole(address[] memory _billRefillers) external;

    function revokeRole(bytes32 role, address account) external;

    function setAdjustment(uint256 _rate, uint256 _target, uint256 _buffer) external;

    function setBillTerms(uint8 _parameter, uint256 _input) external;

    function setClaimApproval(address approvedAccount, bool approved) external;

    function setFeeTiers(uint256[] memory fees, uint256[] memory tierCeilings) external;

    function setMaxTotalPayout(uint256 _maxTotalPayout) external;

    function setPendingOwner(address newPendingOwner) external;

    function supportsInterface(bytes4 interfaceId) external view returns (bool);

    function terms()
        external
        view
        returns (
            uint256 controlVariable,
            uint256 vestingTerm,
            uint256 minimumPrice,
            uint256 maxPayout,
            uint256 maxDebt,
            uint256 maxTotalPayout,
            uint256 initialDebt
        );

    function totalDebt() external view returns (uint256);

    function totalPayoutGiven() external view returns (uint256);

    function totalPrincipalBilled() external view returns (uint256);

    function transferOwnership(address) external view;

    function trueBillPrice() external view returns (uint256 price_);

    function userBillIds() external view returns (uint256[] memory);

    function vestedPayoutAtTime(uint256 _billId, uint256 _timestamp) external view returns (uint256 vestedPayout_);

    function vestingCurve() external view returns (address);

    function vestingPayout(uint256 _billId) external view returns (uint256 vestingPayout_);

    function vestingPeriod(uint256 _billId) external view returns (uint256 vestingStart_, uint256 vestingEnd_);
}

interface ICustomBill {
    struct BillTerms {
        uint256 controlVariable;
        uint256 vestingTerm;
        uint256 minimumPrice;
        uint256 maxPayout;
        uint256 maxDebt;
        uint256 maxTotalPayout;
        uint256 initialDebt;
    }

    struct Bill {
        uint256 payout;
        uint256 payoutClaimed;
        uint256 vesting;
        uint256 vestingTerm;
        uint256 vestingStartTimestamp;
        uint256 lastClaimTimestamp;
        uint256 truePricePaid;
    }

    struct BillCreationDetails {
        address payoutToken;
        address principalToken;
        address initialOwner;
        address vestingCurve;
        uint256[] tierCeilings;
        uint256[] fees;
        bool feeInPayout;
    }

    struct BillAccounts {
        address feeTo;
        address DAO;
        address billNft;
    }
}
